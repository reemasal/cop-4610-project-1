# Project 1

Reema Salem
Dasie Perez

Exercise 1

While running the threadtest program, each thread in the nachos command would output the same value, while incrementing the value by 1 until reaching 5, leaving the final value as seen as 5. 

When incorporating the semaphores, as each thread would increment by 1, the value would increase by 1, while not having the same value from the previous thread, until all threads have ran 5 times. So for example, if the number of threads active are 4, the final value would be 20.

Using -rs would randomize the execution sequence of the threads.

Exercise 2

Locks are similar to semaphores but differ when handling the threads. The main difference lies in the number of threads allowed to hold the resource at once. Locks hold one thread at a time, while semaphores can hold multiple.

Exercise 3

A condition helps manage threads by making them wait in a queue until a specific event occurs. The destructor ensures resources like the waiting queue are cleaned up to prevent memory leaks. In Wait, a thread releases its lock, goes to sleep, and re-acquires the lock when it wakes up, allowing other threads to run in the meantime. Signal wakes one waiting thread, while Broadcast wakes them all up. Interrupts are temporarily disabled during these operations to avoid conflicts and ensure everything runs smoothly by ensuring atomicity, which establishes thread safety.